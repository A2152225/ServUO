using System; 
using System.Collections; 
using Server.Spells;
using Server.Items; 
using Server.Targeting; 
using Server.Spells.Necromancy;
using Server.Spells.Chivalry;
using Server.Spells.Custom;

namespace Server.Items 
{ 
   	public class WizardWard: BaseTalisman
   	{ 
		private bool m_InUse;
		private bool m_UsePower;
		private bool m_BreakOath;

		[CommandProperty( AccessLevel.GameMaster )]
		public bool InUse{ get{ return m_InUse; } set{ m_InUse = value; InvalidateProperties(); } }
		
		[CommandProperty( AccessLevel.GameMaster )]
		public bool UsePower{ get{ return m_UsePower; } set{ m_UsePower = value; InvalidateProperties(); } }

		[CommandProperty( AccessLevel.GameMaster )]
		public bool BreakOath{ get{ return m_BreakOath; } set{ m_BreakOath = value; InvalidateProperties(); } }

		
		
		[Constructable]
		public WizardWard() : base( 0x2F59 )
		{
			Weight = 0.1;
			Name = "Wizards' Ward";
			Layer = Layer.Talisman;
			LootType = LootType.Blessed;
			UsePower = false;
		}

		public static bool BreakSpell( Mobile target, Mobile caster, Spell spell )
		{
			if ( target == null || caster == null || spell == null )
				return false;

			WizardWard sb = target.FindItemOnLayer( Layer.Talisman ) as WizardWard;

			if ( sb == null || !sb.InUse )
				return false;

			int inscribe = (int)caster.Skills[SkillName.Inscribe].Value;

			int magery = (int)caster.Skills[SkillName.Magery].Value;
			int evalint = (int)caster.Skills[SkillName.EvalInt].Value;

			int necro = (int)caster.Skills[SkillName.Necromancy].Value;
			int ss = (int)caster.Skills[SkillName.SpiritSpeak].Value;

			int chivalry = (int)caster.Skills[SkillName.Chivalry].Value;
			int karma = caster.Karma;

			
			int powerdrain = 0;
			int tdb = 1;

			SpellCircle circle = (spell as MagerySpell).Circle;
			if ( circle == SpellCircle.First )
				tdb = 10;
			else if ( circle == SpellCircle.Second )
				tdb = 9;
			else if ( circle == SpellCircle.Third )
				tdb = 8;
			else if ( circle == SpellCircle.Fourth )
				tdb = 7;
			else if ( circle == SpellCircle.Fifth )
				tdb = 6;
			else if ( circle == SpellCircle.Sixth )
				tdb = 5;
			else if ( circle == SpellCircle.Seventh )
				tdb = 4;
			else if ( circle == SpellCircle.Eighth )
				tdb = 3;

			if ( spell is NecromancerSpell )
				powerdrain = (int)((necro+ss)/tdb);
			else if ( spell is PaladinSpell )
				powerdrain = (int)((chivalry+(karma/100))/tdb);
			else if ( spell is RuneSpell )
				powerdrain = (int)((necro+ss)/tdb);
			else if ( spell is ClericSpell )
				powerdrain = (int)((magery+ss)/tdb);
			else
				powerdrain = (int)((magery+evalint)/tdb);
			
			 if (!(sb).UsePower)
			{
				caster.SendMessage( target.Name+"'s Wizard Ward breaks through the spell you cast at them." );
				target.SendMessage( "Wizard Ward breaks through the "+spell.Name+" spell cast at you by "+caster.Name+"." );
				target.PlaySound( 0x201 );
				return true;
			} 
			else
			{	
				return false;
			}
	
		return false;
		}

		public override void OnDoubleClick( Mobile from )
		{
			if ( InUse )
			{
				InUse = false;
				from.SendMessage( "Wizard's Ward is no longer in use." );
			}
			else if ( Parent == from )
			{
				InUse = true;
				from.SendMessage( "Wizard's Ward is now in use." );
			}
			else
				from.SendMessage( "You must have Wizard's Ward equiped to use it." );
		}

	
		
		public override void OnRemoved( object parent )
		{
			if ( parent is Mobile )
			{
				Mobile from = (Mobile) parent;

				if ( InUse )
				{
					InUse = false;
					from.SendMessage( "Wizard's Ward is no longer in use." );
				}
			}

			base.OnRemoved( parent );
		}

		public override void GetProperties( ObjectPropertyList list )
		{
			base.GetProperties( list );

			if ( InUse )
				list.Add( 1060742 ); // active
			else
				list.Add( 1060743 ); // inactive
				
		
		}

		public WizardWard( Serial serial ) : base ( serial ) 
		{             
		}

		public override void Serialize( GenericWriter writer ) 
		{
			base.Serialize( writer ); 
			writer.Write( (int) 1 ); 
			writer.Write( (bool) m_BreakOath ); 
			writer.Write( (bool) m_InUse ); 
			writer.Write( (bool) m_UsePower);
 		}

		public override void Deserialize( GenericReader reader ) 
		{
			base.Deserialize( reader ); 
			int version = reader.ReadInt(); 
			switch ( version )
			{
			case 1:
			{
			m_BreakOath = reader.ReadBool();
			goto case 0;
			}
			case 0:
			{
				m_InUse = reader.ReadBool(); 
			m_UsePower = reader.ReadBool();
			break;
			}
			}
		}
	}
}
